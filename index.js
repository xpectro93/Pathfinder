import Node from '/Node.js';
import AStar from './AStar.js';

let canvas = document.getElementById('root');
let ctx = canvas.getContext('2d');

let WIDTH = canvas.width = window.innerWidth ;
let HEIGHT = canvas.height = window.innerHeight;

const dungeon = [
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1],
    [1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1],
    [1,4,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,4,1],
    [1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1],
    [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1],
    [1,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,1],
    [1,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,1],
    [1,2,2,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,1],
    [1,1,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,1,1],
    [1,1,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,1,1],
    [1,1,1,1,1,1,2,1,1,0,0,0,0,'b',0,0,0,0,0,1,1,2,1,1,1,1,1,1],
    [1,1,1,1,1,1,2,1,1,0,1,1,1,0,0,1,1,1,0,1,1,2,1,1,1,1,1,1],
    [1,1,1,1,1,1,2,1,1,0,1,0,'i','p','c',0,0,1,0,1,1,2,1,1,1,1,1,1],
    [6,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,6],
    [1,1,1,1,1,1,2,1,1,0,1,0,0,0,0,0,0,1,0,1,1,2,1,1,1,1,1,1],
    [1,1,1,1,1,1,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,1,1,1,1,1,1],
    [1,1,1,1,1,1,2,1,1,0,0,0,0,0,0,0,0,0,0,1,1,2,1,1,1,1,1,1],
    [1,1,1,1,1,1,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,1,1,1,1,1,1],
    [1,1,1,1,1,1,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,1,1,1,1,1,1],
    [1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1],
    [1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1],
    [1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1],
    [1,4,2,2,1,1,2,2,2,2,2,2,2,0,5,2,2,2,2,2,2,2,1,1,2,2,4,1],
    [1,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,1],
    [1,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,1],
    [1,2,2,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,1],
    [1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1],
    [1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1],
    [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
]

// const dungeon = [
//     [1,1,1,1,1,1,1],
//     [1,0,0,1,1,1,1],
//     [1,0,1,1,1,1,1],
//     [1,0,1,0,0,0,1],
//     [1,0,0,0,1,0,1],
//     [1,0,0,1,0,0,1],
//     [1,1,1,1,1,1,1]
// ]

let objGrid = []
dungeon.forEach((row, y) => {
    let objRow = []
    row.forEach((box, x) => {
    
        if(box === 1) {
            objRow.push(new Node(x,y,true,WIDTH,HEIGHT));

        }else {
            objRow.push(new Node(x,y,false,WIDTH,HEIGHT));
        }


    });
    objGrid.push(objRow);
});



let start = objGrid[1][1];
let end = objGrid[20][15];



let kappa = new AStar(start, end,objGrid);
kappa.findPath();

const draw = (path) => {

      // console.log('this is happening');
    objGrid.forEach(row => {
        row.forEach(box => {
            // debugger
            box.draw(ctx)
        })
    })
    path.forEach(node => {
        let x = node.x;
        let y = node.y;
        objGrid[y][x].draw(ctx,"red")
    })

  




}

// objGrid[1][1].draw(ctx,"red")
// objGrid[1][2].draw(ctx,"red")
// objGrid[1][4].draw(ctx,"red")
// objGrid[2][4].draw(ctx,"red")
// objGrid[3][4].draw(ctx,"red")
// objGrid[3][3].draw(ctx,"red")
// objGrid[4][3].draw(ctx,"red")
// objGrid[5][3].draw(ctx,"red")
// objGrid[5][4].draw(ctx,"red")
// objGrid[5][5].draw(ctx,"red")
// objGrid[4][5].draw(ctx,"red")
// debugger
let path = kappa.constructPath()
console.log(path)
draw(path)
